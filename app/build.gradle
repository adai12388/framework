apply plugin: 'com.android.application'
apply plugin: 'com.jakewharton.butterknife'
apply plugin: 'me.tatarka.retrolambda'


android {

    compileSdkVersion rootProject.ext.android.compileSdkVersion
    buildToolsVersion rootProject.ext.android.buildToolsVersion
    defaultConfig {
        applicationId rootProject.ext.android.applicationId
        minSdkVersion rootProject.ext.android.minSdkVersion
        targetSdkVersion rootProject.ext.android.targetSdkVersion
        versionCode rootProject.ext.android.versionCode
        versionName rootProject.ext.android.versionName

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

        javaCompileOptions { annotationProcessorOptions { includeCompileClasspath = true } }
        signingConfigs {
            //签名配置
            release {
                keyAlias 'yison'
                keyPassword '123888'
                storeFile file('../kestore/framework.jks')
                storePassword '123888'
                v1SigningEnabled true
                v2SigningEnabled true
            }
        }
        //MultiDex分包方法
        multiDexEnabled true

        //Arouter路由配置
        javaCompileOptions {
            annotationProcessorOptions {
                arguments = [moduleName: project.getName()]
            }
        }

        //目录指向配置
        sourceSets {
            //设置依赖so库路径
            main.jniLibs.srcDirs = ['libs']
        }

        ndk {
            // 设置支持的SO库架构(cpu)
            abiFilters 'armeabi' , 'x86', 'armeabi-v7a', 'x86_64', 'arm64-v8a'
        }
    }
    buildTypes {
        debug{
            //是否进行混淆
            minifyEnabled false
            // 混淆文件的位置
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            //配置签名文件
            signingConfig signingConfigs.release
        }
        release {
            minifyEnabled false
            //是否清理无用资源,依赖于minifyEnabled
            shrinkResources false
            //是否启用zipAlign压缩
            zipAlignEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            //配置签名文件
            signingConfig signingConfigs.release
            //配置apk路径
            applicationVariants.all {
                variant ->
                    def buildType = variant.buildType.name
                    if(buildType=='release'){
                        // variant.getPackageApplication().outputDirectory = new File(rootProject.rootDir,"releaseApk")
                        variant.getPackageApplication().outputDirectory = new File("C:\\work\\git\\framework\\app\\release")
                    }else {
                        //debug版本
                        variant.getPackageApplication().outputDirectory = new File("C:\\work\\git\\framework\\app\\debug")
                    }

                    variant.outputs.each { output ->
                        def outputFile = output.outputFile
                        if (outputFile != null && outputFile.name.endsWith('.apk')) {
                            // 输出apk名称为XXX20160328_v1.0.0_vc10_XXXX_test.apk
                                def fileName = "frame_${releaseTime()}_v${rootProject.ext.android.versionName}.apk"
                            //  output.outputFile 改为 outputFileName
                                output.apkData.outputFileName = fileName

                        }
                    }
            }
        }
    }
}

// 定义一个打包时间
def releaseTime() {
    return new Date().format("yyyy-MM-dd", TimeZone.getTimeZone("UTC"))
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    testImplementation rootProject.ext.dependencies["junit"]
    androidTestImplementation rootProject.ext.dependencies["runner"]
    androidTestImplementation rootProject.ext.dependencies["espresso_core"]

    implementation project(':component_data')
    implementation project(':component_base')
    if (!rootProject.ext.isModule) {
        implementation project(':module_shop_mall')
        implementation project(':module_shop_cart')
        implementation project(':module_welfare')
        implementation project(':module_common_ui')
    }
    //常用控件依赖包
    implementation project(':baseLib:alertview')
    implementation project(':baseLib:videocompressV2')
    implementation project(':baseLib:kprogresshud')
    implementation project(':baseLib:flowlayout-lib')
    implementation project(':baseLib:customview')
    //杀不死的小强,防止app崩溃
    implementation project(':baseLib:cockroach-x')
}
//解决支持库版本不兼容问题
//configurations.all {
//    resolutionStrategy.eachDependency { DependencyResolveDetails details ->
//        def requested = details.requested
//        if (requested.group == 'com.android.support') {
//            if (!requested.name.startsWith("multidex")) {
//                details.useVersion '25.3.0'
//            }
//        }
//    }
//}
//repositories {
//    mavenCentral()
//}
